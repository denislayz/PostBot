import os
import json
import logging
import requests
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ForumTopic
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==========
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

DATA_FILE = "data.json"
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
else:
    data = {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_state(uid):
    return data.setdefault(str(uid), {"state": "idle", "groups": {}, "topics": {}})

def reset_state_but_keep(uid):
    prev = data.get(str(uid), {})
    return {"state": "idle", "groups": prev.get("groups", {}), "topics": {}}

# ========== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º —Ñ–æ—Ä—É–º–∞ —á–µ—Ä–µ–∑ HTTP-–∑–∞–ø—Ä–æ—Å ==========
def fetch_forum_topics_sync(chat_id: int):
    url = f"https://api.telegram.org/bot{TOKEN}/getForumTopics"
    resp = requests.get(url, params={"chat_id": chat_id})
    resp.raise_for_status()
    result = resp.json().get("result", [])
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã ForumTopic
    topics = []
    for t in result:
        try:
            topics.append(ForumTopic(**t))
        except TypeError:
            # –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –±–µ—Ä–µ–º –∫–∞–∫ –º–∏–Ω–∏–º—É–º id –∏ name
            topics.append(ForumTopic(message_thread_id=t["message_thread_id"], name=t["name"], icon_color=0, icon_custom_emoji_id=None))
    return topics

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = get_user_state(uid)
    kbd = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group")]]
    for gid, title in st["groups"].items():
        kbd.append([InlineKeyboardButton(title, callback_data=f"group:{gid}")])
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=InlineKeyboardMarkup(kbd)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    st = get_user_state(uid)

    # 1) –ù–∞—á–∞–ª–æ: –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É
    if query.data == "add_group":
        st["state"] = "waiting_for_mention"
        save_data()
        return await query.edit_message_text("–û—Ç–º–µ—Ç—å—Ç–µ –º–µ–Ω—è (@), —è –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ –≥—Ä—É–ø–ø—É.")

    # 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É ‚Äî –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–µ–º—ã
    if query.data.startswith("group:"):
        gid = int(query.data.split(":",1)[1])
        st = data[str(uid)] = reset_state_but_keep(uid)
        st["groups"][str(gid)] = st["groups"].get(str(gid), "")
        st["selected_group"] = gid

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP
        try:
            topics = fetch_forum_topics_sync(gid)
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã: %s", e)
            return await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥—Ä—É–ø–ø–∞ ‚Äî —Ñ–æ—Ä—É–º.")

        st_topics = {}
        kbd = []
        for t in topics:
            st_topics[str(t.message_thread_id)] = t.name
            kbd.append([InlineKeyboardButton(t.name, callback_data=f"topic:{t.message_thread_id}")])
        st["topics"] = st_topics
        save_data()

        kbd.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
        return await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(kbd)
        )

    # 3) –í—ã–±–æ—Ä —Ç–µ–º—ã
    if query.data.startswith("topic:"):
        thread_id = int(query.data.split(":",1)[1])
        st["selected_topic"] = thread_id
        st["state"] = "post_title"
        save_data()
        return await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

    # 4) –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≥—Ä—É–ø–ø
    if query.data == "back":
        data[str(uid)] = reset_state_but_keep(uid)
        save_data()
        return await start(update, context)

    # 5) –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    if query.data == "preview":
        p = st.get("post", {})
        text = f"*{p.get('title','')}*\n{p.get('text','')}"
        buttons = p.get("buttons", [])
        markup = InlineKeyboardMarkup([[InlineKeyboardButton(b["text"], url=b["url"])] for b in buttons]) if buttons else None
        if p.get("media"):
            return await context.bot.send_photo(
                chat_id=uid, photo=p["media"], caption=text,
                parse_mode="Markdown", reply_markup=markup
            )
        return await context.bot.send_message(
            chat_id=uid, text=text,
            parse_mode="Markdown", reply_markup=markup
        )

    # 6) –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ —Ç–µ–º—É
    if query.data == "send":
        p = st.get("post", {})
        gid = st["selected_group"]
        tid = st["selected_topic"]
        text = f"*{p.get('title','')}*\n{p.get('text','')}"
        buttons = p.get("buttons", [])
        markup = InlineKeyboardMarkup([[InlineKeyboardButton(b["text"], url=b["url"])] for b in buttons]) if buttons else None
        if p.get("media"):
            await context.bot.send_photo(
                chat_id=gid, photo=p["media"], caption=text,
                parse_mode="Markdown", reply_markup=markup,
                message_thread_id=tid
            )
        else:
            await context.bot.send_message(
                chat_id=gid, text=text,
                parse_mode="Markdown", reply_markup=markup,
                message_thread_id=tid
            )
        await query.edit_message_text("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ–º—É!")
        data[str(uid)] = reset_state_but_keep(uid)
        save_data()

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = get_user_state(uid)

    # –ü—Ä–∏–≤—è–∑–∫–∞ –≥—Ä—É–ø–ø—ã –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é
    if st["state"] == "waiting_for_mention" and update.message.chat.type in ["group","supergroup"]:
        chat = update.effective_chat
        st["groups"][str(chat.id)] = chat.title or "–ì—Ä—É–ø–ø–∞"
        st["state"] = "idle"
        save_data()
        await update.message.reply_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ ¬´{chat.title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        return await start(update, context)

    # –®–∞–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    if st["state"] == "post_title":
        txt = update.message.text or ""
        if txt != "-":
            st.setdefault("post", {})["title"] = txt
        st["state"] = "post_text"
        save_data()
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–∏–ª–∏ ¬´-¬ª):")

    if st["state"] == "post_text":
        txt = update.message.text or ""
        if txt != "-":
            st["post"]["text"] = txt
        st["state"] = "post_media"
        save_data()
        return await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ ¬´-¬ª:")

    if st["state"] == "post_media":
        if update.message.photo:
            st["post"]["media"] = update.message.photo[-1].file_id
        st["state"] = "post_buttons"
        save_data()
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ (—Ç–µ–∫—Å—Ç|URL –≤ —Å—Ç—Ä–æ–∫–µ) –∏–ª–∏ ¬´-¬ª:")

    if st["state"] == "post_buttons":
        txt = update.message.text or ""
        if txt != "-":
            btns = []
            for line in txt.splitlines():
                if "|" in line:
                    t,u = line.split("|",1)
                    btns.append({"text":t.strip(),"url":u.strip()})
            st["post"]["buttons"] = btns
        st["state"] = "confirm"
        save_data()
        return await update.message.reply_text(
            "–ì–æ—Ç–æ–≤–æ: –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
                [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back")]
            ])
        )

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.ALL, message_handler))
    application.run_polling(poll_interval=3.0)
