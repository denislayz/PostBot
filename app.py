import os
import json
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==========
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

DATA_FILE = "data.json"
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
else:
    data = {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_state(uid):
    return data.setdefault(
        str(uid),
        {
            "state": "idle",
            "groups": {},
            "topics": {},
            "post": {},
            "selected_group": None,
            "selected_topic": None,
            "reactions": {},
            "button_type": None,
            "users_reacted": set()
        }
    )

def reset_state_but_keep(uid):
    prev = data.get(str(uid), {})
    return {
        "state": "idle",
        "groups": prev.get("groups", {}),
        "topics": prev.get("topics", {}),
        "post": {},
        "selected_group": None,
        "selected_topic": None,
        "reactions": {},
        "button_type": None,
        "users_reacted": set()
    }

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ========== (–ø—Ä–∏–º–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º button_handler)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data[str(uid)] = reset_state_but_keep(uid)
    save_data()
    kb = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group")]]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=InlineKeyboardMarkup(kb))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    st = get_user_state(uid)
    cb = query.data

    if cb == "add_group":
        st["state"] = "await_group"
        save_data()
        await query.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ—ë.")
        return

    if cb == "btn_react":
        st["state"] = "post_react_1"
        st["button_type"] = "react"
        save_data()
        await query.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —ç–º–æ–¥–∂–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏")
        return

    if cb == "btn_link":
        st["state"] = "post_link"
        st["button_type"] = "link"
        save_data()
        await query.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¢–µ–∫—Å—Ç, URL'")
        return

    if cb == "skip_buttons":
        st["state"] = "confirm"
        st["button_type"] = None
        save_data()
        kb = [
            [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
            [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
            [InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å", callback_data="restart")]
        ]
        await query.message.reply_text("–ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ:", reply_markup=InlineKeyboardMarkup(kb))
        return

    # —Ä–µ–∞–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∞ 2
    if st["state"] == "post_react_2" and cb == "continue_react":
        st["state"] = "confirm"
        save_data()
        kb = [
            [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
            [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
            [InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å", callback_data="restart")]
        ]
        await query.message.reply_text("–†–µ–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup(kb))
        return

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = get_user_state(uid)

    if st["state"] == "await_group":
        group_link = update.message.text
        st["groups"][group_link] = {}
        st["selected_group"] = group_link
        st["state"] = "await_topic"
        save_data()
        await update.message.reply_text(f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) –≥—Ä—É–ø–ø—É {group_link}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ç–µ–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ, ID'")
        return

    if st["state"] == "await_topic":
        try:
            name, tid = update.message.text.split(",")
            st["topics"][tid.strip()] = name.strip()
            st["selected_topic"] = tid.strip()
            st["state"] = "await_post_text"
            save_data()
            await update.message.reply_text(f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) —Ç–µ–º—É {name.strip()}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
        except ValueError:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: –ù–æ–≤–æ—Å—Ç–∏, 123")
        return

    if st["state"] == "await_post_text":
        st["post"]["text"] = update.message.text
        st["state"] = "await_post_media"
        save_data()
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–µ–¥–∏–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')")
        return

    if st["state"] == "await_post_media":
        if update.message.photo:
            st["post"]["media"] = update.message.photo[-1].file_id
        st["state"] = "await_button_type"
        save_data()
        kb = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏", callback_data="btn_react")],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="btn_link")],
            [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_buttons")]
        ]
        await update.message.reply_text("–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if st["state"] == "post_react_1":
        em1 = update.message.text.strip()
        st["reactions"]["r1"] = em1
        st["state"] = "post_react_2"
        save_data()
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—Ç–æ—Ä–æ–µ —ç–º–æ–¥–∂–∏")
        return

    if st["state"] == "post_react_2":
        em2 = update.message.text.strip()
        st["reactions"]["r2"] = em2
        st["state"] = "confirm"
        save_data()
        kb = [
            [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
            [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
            [InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å", callback_data="restart")]
        ]
        await update.message.reply_text("–†–µ–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup(kb))
        return

    if st["state"] == "post_link":
        try:
            text, url = update.message.text.split(",")
            st["post"]["link"] = {"text": text.strip(), "url": url.strip()}
            st["state"] = "confirm"
            save_data()
            kb = [
                [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
                [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
                [InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å", callback_data="restart")]
            ]
            await update.message.reply_text("–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(kb))
        except ValueError:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: –ü–æ–¥—Ä–æ–±–Ω–µ–µ, https://example.com")
        return

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========

if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.ALL, message_handler))
    app.run_polling()
