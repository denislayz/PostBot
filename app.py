import os
import json
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    InputMediaVideo,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==========
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

DATA_FILE = "data.json"
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
else:
    data = {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_state(uid):
    return data.setdefault(
        str(uid),
        {
            "state": "idle",
            "groups": {},
            "topics": {},
            "post": {},
            "selected_group": None,
            "selected_topic": None,
            "reactions": {},
            "button_type": None,
            "reaction_clicks": {}
        }
    )

def reset_state_but_keep(uid):
    prev = data.get(str(uid), {})
    return {
        "state": "idle",
        "groups": prev.get("groups", {}),
        "topics": prev.get("topics", {}),
        "post": {},
        "selected_group": None,
        "selected_topic": None,
        "reactions": {},
        "button_type": None,
        "reaction_clicks": {}
    }

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ========== 
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data[str(uid)] = reset_state_but_keep(uid)
    save_data()
    kb = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", switch_inline_query="add_group")]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    st = get_user_state(uid)

    if query.data == "restart":
        data[str(uid)] = reset_state_but_keep(uid)
        save_data()
        return await query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...", reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", switch_inline_query="add_group")]]
        ))

    if query.data == "choose_group":
        st["state"] = "choose_group"
        save_data()
        return await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:")

    if query.data == "skip_caption":
        st["post"]["caption"] = ""
        st["state"] = "choose_buttons"
        save_data()
        return await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–æ–∫:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üòä –†–µ–∞–∫—Ü–∏–∏", callback_data="btn_react")],
                [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∏", callback_data="btn_link")],
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_buttons")]
            ])
        )

    if query.data == "btn_react":
        st["state"] = "post_react_1"
        save_data()
        return await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∂–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏:")

    if query.data == "skip_buttons":
        st["state"] = "confirm"
        save_data()
        return await query.edit_message_text("–ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
                [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
                [InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å", callback_data="restart")]
            ])
        )

    if query.data == "btn_link":
        st["state"] = "add_link_text"
        save_data()
        return await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤ –õ–°

    uid = update.effective_user.id
    st = get_user_state(uid)

    if st["state"] == "choose_group":
        st["selected_group"] = update.message.text.strip()
        st["state"] = "choose_topic"
        save_data()
        return await update.message.reply_text(f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) –≥—Ä—É–ø–ø—É: {st['selected_group']}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ç–µ–º—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ,ID)")

    if st["state"] == "choose_topic":
        try:
            title, tid = update.message.text.split(",", 1)
            tid = int(tid.strip())
            st["selected_topic"] = {"title": title.strip(), "id": tid}
            st["state"] = "add_media"
            save_data()
            return await update.message.reply_text(f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) —Ç–µ–º—É: {title.strip()}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ:")
        except Exception:
            return await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ: –ù–∞–∑–≤–∞–Ω–∏–µ,ID")

    if st["state"] == "add_media":
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            st["post"]["media"] = {"type": "photo", "file_id": file_id}
        elif update.message.video:
            file_id = update.message.video.file_id
            st["post"]["media"] = {"type": "video", "file_id": file_id}
        else:
            return await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        st["state"] = "add_caption"
        save_data()
        kb = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_caption")]]
        return await update.message.reply_text("–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É:", reply_markup=InlineKeyboardMarkup(kb))

    if st["state"] == "add_caption":
        st["post"]["caption"] = update.message.text
        st["state"] = "choose_buttons"
        save_data()
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–æ–∫:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üòä –†–µ–∞–∫—Ü–∏–∏", callback_data="btn_react")],
                [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∏", callback_data="btn_link")],
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_buttons")]
            ])
        )

    if st["state"] == "post_react_1":
        st["reactions"]["r1"] = update.message.text.strip()
        st["state"] = "post_react_2"
        save_data()
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∂–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏:")

    if st["state"] == "post_react_2":
        st["reactions"]["r2"] = update.message.text.strip()
        st["state"] = "confirm"
        save_data()
        return await update.message.reply_text("–†–µ–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
                [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
                [InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å", callback_data="restart")]
            ])
        )

    if st["state"] == "add_link_text":
        st["post"]["btn_text"] = update.message.text
        st["state"] = "add_link_url"
        save_data()
        return await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL –∫–Ω–æ–ø–∫–∏:")

    if st["state"] == "add_link_url":
        st["post"]["btn_url"] = update.message.text
        st["state"] = "confirm"
        save_data()
        return await update.message.reply_text("–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
                [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
                [InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å", callback_data="restart")]
            ])
        )

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========
if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.ALL, message_handler))
    app.run_polling()
