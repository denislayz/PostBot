import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==========
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

DATA_FILE = "data.json"
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        data = json.load(f)
else:
    data = {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_state(uid):
    return data.setdefault(str(uid), {"state": "idle", "groups": {}, "topics": {}})

def reset_user_state(uid):
    prev = data.get(str(uid), {})
    groups = prev.get("groups", {})
    topics = prev.get("topics", {})
    data[str(uid)] = {"state": "idle", "groups": groups, "topics": topics}
    save_data()

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    state = get_user_state(uid)
    groups = state.get("groups", {})
    if not groups:
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group")]]
    else:
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"group:{gid}")]
            for gid, name in groups.items()
        ]
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group")])
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    state = get_user_state(uid)

    if query.data == "add_group":
        state["state"] = "waiting_for_mention"
        save_data()
        await query.edit_message_text("–û—Ç–º–µ—Ç—å—Ç–µ –º–µ–Ω—è (@), —è –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ—Ç —á–∞—Ç (–≥—Ä—É–ø–ø—É).")
        return

    if query.data.startswith("group:"):
        gid = query.data.split(":",1)[1]
        state["selected_group"] = gid
        state["state"] = "group_menu"
        save_data()
        await query.edit_message_text(
            "–ú–µ–Ω—é –≥—Ä—É–ø–ø—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç", callback_data="make_post")],
                [InlineKeyboardButton("üóÇ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_topic")],
                [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="remove_group")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )
        return

    if query.data == "make_post":
        state["state"] = "post_title"
        state["post"] = {}
        save_data()
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        return

    if query.data == "add_topic":
        state["state"] = "topic_name"
        save_data()
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏ thread_id —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return

    if query.data == "remove_group":
        gid = state.get("selected_group")
        if gid:
            state["groups"].pop(gid, None)
        reset_user_state(uid)
        await query.edit_message_text("–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await start(update, context)
        return

    if query.data == "back":
        reset_user_state(uid)
        await start(update, context)
        return

    if query.data == "preview":
        post = state.get("post", {})
        text = f"*{post.get('title','')}*\n{post.get('text','')}"
        buttons = post.get("buttons", [])
        markup = InlineKeyboardMarkup([[InlineKeyboardButton(b["text"], url=b["url"])] for b in buttons]) if buttons else None
        if post.get("media"):
            await context.bot.send_photo(
                chat_id=uid,
                photo=post["media"],
                caption=text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        else:
            await context.bot.send_message(
                chat_id=uid,
                text=text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        return

    if query.data == "send":
        post = state.get("post", {})
        gid = state.get("selected_group")
        text = f"*{post.get('title','')}*\n{post.get('text','')}"
        buttons = post.get("buttons", [])
        markup = InlineKeyboardMarkup([[InlineKeyboardButton(b["text"], url=b["url"])] for b in buttons]) if buttons else None
        if post.get("media"):
            await context.bot.send_photo(
                chat_id=gid,
                photo=post["media"],
                caption=text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        else:
            await context.bot.send_message(
                chat_id=gid,
                text=text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        await query.edit_message_text("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        reset_user_state(uid)
        return

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    state = get_user_state(uid)

    # –û–∂–∏–¥–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    if state["state"] == "waiting_for_mention":
        chat = update.effective_chat
        st = data.setdefault(str(uid), {})
        gr = st.setdefault("groups", {})
        gr[str(chat.id)] = chat.title or "–ì—Ä—É–ø–ø–∞"
        st["state"] = "idle"
        save_data()
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ ¬´{chat.title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await start(update, context)
        return

    # –í–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if state["state"] == "post_title":
        text = update.message.text or ""
        if text != "-":
            state["post"]["title"] = text
        state["state"] = "post_text"
        save_data()
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        return

    # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    if state["state"] == "post_text":
        text = update.message.text or ""
        if text != "-":
            state["post"]["text"] = text
        state["state"] = "post_media"
        save_data()
        await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª):")
        return

    # –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
    if state["state"] == "post_media":
        if update.message.photo:
            state["post"]["media"] = update.message.photo[-1].file_id
        state["state"] = "post_buttons"
        save_data()
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ (—Ç–µ–∫—Å—Ç|URL –Ω–∞ —Å—Ç—Ä–æ–∫—É), ¬´-¬ª ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
        return

    # –í–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    if state["state"] == "post_buttons":
        text = update.message.text or ""
        if text != "-":
            buttons = []
            for line in text.splitlines():
                if "|" in line:
                    t,u = line.split("|",1)
                    buttons.append({"text":t.strip(),"url":u.strip()})
            state["post"]["buttons"] = buttons
        state["state"] = "confirm"
        save_data()
        await update.message.reply_text(
            "–ì–æ—Ç–æ–≤–æ. –•–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
                [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back")]
            ])
        )
        return

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.ALL, message_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    application.run_polling(poll_interval=3.0)
