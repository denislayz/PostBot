import os
import json
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==========
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

DATA_FILE = "data.json"
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
else:
    data = {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_state(uid):
    return data.setdefault(
        str(uid),
        {
            "state": "idle",
            "groups": {},
            "topics": {},
            "post": {},
            "selected_group": None,
            "selected_topic": None,
            "reactions": {}
        }
    )

def reset_state_but_keep(uid):
    prev = data.get(str(uid), {})
    return {
        "state": "idle",
        "groups": prev.get("groups", {}),
        "topics": prev.get("topics", {}),
        "post": {},
        "selected_group": None,
        "selected_topic": None,
        "reactions": {}
    }

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞—á–∞—Ç—å" –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    keyboard = [[InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å", callback_data="restart")]]
    uid = None
    if update.message:
        uid = update.effective_user.id
        send = update.message.reply_text
    else:
        uid = update.callback_query.from_user.id
        def send(text, **kwargs):
            return context.bot.send_message(chat_id=uid, text=text, **kwargs)

    st = get_user_state(uid)
    # –†–∏—Å—É–µ–º –≥—Ä—É–ø–ø—ã –Ω–∏–∂–µ
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group")])
    for gid, title in st["groups"].items():
        keyboard.append([InlineKeyboardButton(title, callback_data=f"group:{gid}")])

    await send(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    st = get_user_state(uid)

    # –û–±—â–∏–π restart
    if query.data == "restart":
        data[str(uid)] = reset_state_but_keep(uid)
        save_data()
        return await start(update, context)

    # –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É
    if query.data == "add_group":
        st["state"] = "waiting_for_mention"
        save_data()
        return await query.edit_message_text(
            "–û—Ç–º–µ—Ç—å—Ç–µ –º–µ–Ω—è (@) –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        )

    # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    if query.data.startswith("group:"):
        gid = int(query.data.split("<",1)[0].split(":")[1])
        group_name = st["groups"].get(str(gid), "–≥—Ä—É–ø–ø–∞")
        st = data[str(uid)] = reset_state_but_keep(uid)
        st["groups"][str(gid)] = group_name
        st["selected_group"] = gid
        save_data()
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await query.edit_message_text(f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) –≥—Ä—É–ø–ø—É {group_name}")
        # –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–º—ã
        keyboard = [[InlineKeyboardButton("üè† –ù–∞—á–∞—Ç—å", callback_data="restart")]]
        keyboard.append([InlineKeyboardButton("üóÇ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_topic")])
        for tid, name in st["topics"].items():
            keyboard.append([InlineKeyboardButton(name, callback_data=f"topic:{tid}")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="restart")])
        return await context.bot.send_message(
            chat_id=uid,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É –≤—Ä—É—á–Ω—É—é
    if query.data == "add_topic":
        st["state"] = "waiting_for_topic_entry"
        save_data()
        return await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏ thread_id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–æ—Ç–∞, 123456"
        )

    # –í—ã–±–æ—Ä —Ç–µ–º—ã
    if query.data.startswith("topic:"):
        tid = query.data.split(":")[1]
        topic_name = st["topics"].get(tid)
        st["selected_topic"] = tid
        st["state"] = "post_title"
        save_data()
        return await query.edit_message_text(f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) —Ç–µ–º—É {topic_name}\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:")

    # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    if query.data == "skip":
        # –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –≤–≤–æ–¥ '-', –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –¥–≤–∏–∂–µ–º—Å—è –¥–∞–ª—å—à–µ
        cur = st["state"]
        st["post"][cur.split("_")[1]] = None
        # —Å–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if cur == "post_title": st["state"] = "post_text"
        elif cur == "post_text": st["state"] = "post_media"
        elif cur == "post_media": st["state"] = "post_buttons"
        save_data()
        return await context.bot.send_message(chat_id=uid, text="–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.")

    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞, —Ä–µ–∞–∫—Ü–∏–∏ / —Å—Å—ã–ª–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    if query.data == "choose_buttons":
        st["state"] = "choose_button_type"
        save_data()
        kb = [[InlineKeyboardButton("üëç –†–µ–∞–∫—Ü–∏–∏", callback_data="btn_react")],
              [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∏", callback_data="btn_link")],
              [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]]
        return await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–æ–∫:", reply_markup=InlineKeyboardMarkup(kb)
        )
    # –î–∞–ª–µ–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–π –∏ —Å—Å—ã–ª–æ–∫...

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å message_handler, –¥–æ–±–∞–≤–∏–≤ inline skip –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥, –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é

if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.ALL, message_handler))
    app.run_polling()
